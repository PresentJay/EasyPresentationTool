/// <reference types="react" />
import { StylerElement } from "./types";
export default function styled<T extends keyof JSX.IntrinsicElements = "div">(Tag: T, css: string): {
    new (props: any): {
        element: StylerElement<T>;
        render(): import("react").DOMElement<{
            children?: import("react").ReactNode;
            className: string;
        }, Element>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        getElement(): StylerElement<T>;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{
            [key: string]: any;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            [key: string]: any;
        }> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
    };
    contextType?: import("react").Context<any> | undefined;
};
