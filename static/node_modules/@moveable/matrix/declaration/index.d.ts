export declare function ignoreDimension(matrix: number[], m: number, n?: number): number[];
export declare function invert(matrix: number[], n?: number): number[];
export declare function transpose(matrix: number[], n?: number): number[];
export declare function getRad(pos1: number[], pos2: number[]): number;
export declare function getOrigin(matrix: number[], n?: number): number[];
export declare function convertPositionMatrix(matrix: number[], n: number): number[];
export declare function convertDimension(matrix: number[], n: number, m: number): number[];
export declare function multiplies(n: number, ...matrixes: number[][]): number[];
export declare function multiply(matrix: number[], matrix2: number[], n: number): number[];
export declare function multiplyCSS(matrix: number[], matrix2: number[], n?: number): number[];
export declare function sum(...nums: number[]): number;
export declare function average(...nums: number[]): number;
export declare function plus(pos1: number[], pos2: number[]): number[];
export declare function minus(pos1: number[], pos2: number[]): number[];
export declare function caculate(matrix: number[], matrix2: number[], n?: number): number[];
export declare function rotate(pos: number[], rad: number): number[];
export declare function convertCSStoMatrix(a: number[]): number[];
export declare function convertMatrixtoCSS(a: number[]): number[];
export declare function createRotateMatrix(rad: number, n: number): number[];
export declare function createIdentityMatrix(n: number): number[];
export declare function createScaleMatrix(scale: number[], n: number): number[];
export declare function createOriginMatrix(origin: number[], n: number): number[];
export declare function createWarpMatrix(pos0: number[], pos1: number[], pos2: number[], pos3: number[], nextPos0: number[], nextPos1: number[], nextPos2: number[], nextPos3: number[]): number[];
