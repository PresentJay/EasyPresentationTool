{"version":3,"file":"matrix.cjs.js","sources":["../src/index.ts"],"sourcesContent":["function add(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    endIndex: number,\n    fromStart: number,\n    k: number,\n) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        matrix[i] += matrix[fromStart + i - startIndex] * k;\n        inverseMatrix[i] += inverseMatrix[fromStart + i - startIndex] * k;\n    }\n}\n\nfunction swap(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    endIndex: number,\n    fromStart: number,\n) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        const v = matrix[i];\n        const iv = inverseMatrix[i];\n\n        matrix[i] = matrix[fromStart + i - startIndex];\n        matrix[fromStart + i - startIndex] = v;\n\n        inverseMatrix[i] = inverseMatrix[fromStart + i - startIndex];\n        inverseMatrix[fromStart + i - startIndex] = iv;\n    }\n}\n\nfunction divide(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    endIndex: number,\n    k: number,\n) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        matrix[i] /= k;\n        inverseMatrix[i] /= k;\n    }\n}\n\nexport function ignoreDimension(\n    matrix: number[],\n    m: number,\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n\n    for (let i = 0; i < n; ++i) {\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n\n    return newMatrix;\n}\n\nexport function invert(\n    matrix: number[],\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n    const inverseMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n; ++i) {\n        const startIndex = n * i;\n        const endIndex = n * (i + 1);\n        const identityIndex = startIndex + i;\n\n        if (newMatrix[identityIndex] === 0) {\n            for (let j = i + 1; j < n; ++j) {\n                if (newMatrix[n * j + i]) {\n                    swap(newMatrix, inverseMatrix, startIndex, endIndex, n * j);\n                    break;\n                }\n            }\n        }\n        if (newMatrix[identityIndex]) {\n            divide(newMatrix, inverseMatrix, startIndex, endIndex, newMatrix[identityIndex]);\n        } else {\n            // no inverse matrix\n            return [];\n        }\n        for (let j = 0; j < n; ++j) {\n            const targetStartIndex = n * j;\n            const targetEndIndex = targetStartIndex + n;\n            const targetIndex = targetStartIndex + i;\n            const target = newMatrix[targetIndex];\n\n            if (target === 0 || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, targetEndIndex, startIndex, -target);\n        }\n    }\n\n    return inverseMatrix;\n}\n\nexport function transpose(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n\nexport function getRad(pos1: number[], pos2: number[]) {\n    const distX = pos2[0] - pos1[0];\n    const distY = pos2[1] - pos1[1];\n    const rad = Math.atan2(distY, distX);\n\n    return rad > 0 ? rad : rad + Math.PI * 2;\n}\n\nexport function getOrigin(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const originMatrix: number[] = [];\n\n    for (let i = 0; i < n - 1; ++i) {\n        originMatrix[i] = matrix[(i + 1) * n - 1];\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n\nexport function convertPositionMatrix(matrix: number[], n: number) {\n    const newMatrix = matrix.slice();\n\n    for (let i = matrix.length; i < n - 1; ++i) {\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n\nexport function convertDimension(matrix: number[], n: number = Math.sqrt(matrix.length), m: number) {\n    // n < m\n    if (n === m) {\n        return matrix;\n    }\n    const newMatrix = createIdentityMatrix(m);\n\n    const length = Math.min(n, m);\n    for (let i = 0; i < length - 1; ++i) {\n        for (let j = 0; j < length - 1; ++j) {\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n\n    return newMatrix;\n}\n\nexport function multiplies(n: number, ...matrixes: number[][]) {\n    let m: number[] = createIdentityMatrix(n);\n\n    matrixes.forEach(matrix => {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n\nexport function multiply(matrix: number[], matrix2: number[], n: number) {\n    const newMatrix: number[] = [];\n    // n * m X m * k\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[i * k + j] = 0;\n            for (let l = 0; l < m; ++l) {\n                newMatrix[i * k + j] += matrix[i * m + l] * matrix2[l * k + j];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\n\nexport function multiplyCSS(matrix: number[], matrix2: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n    // n(y) * m(x) X m(y) * k(x)\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[i + j * k] = 0;\n            for (let l = 0; l < m; ++l) {\n                newMatrix[i + j * k] += matrix[i + l * m] * matrix2[l + j * k];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\nexport function sum(...nums: number[]) {\n    const length = nums.length;\n    let total = 0;\n\n    for (let i = length - 1; i >= 0; --i) {\n        total += nums[i];\n    }\n    return total;\n}\nexport function average(...nums: number[]) {\n    const length = nums.length;\n    let total = 0;\n\n    for (let i = length - 1; i >= 0; --i) {\n        total += nums[i];\n    }\n    return length ? total / length : 0;\n}\nexport function plus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n\nexport function minus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n\nexport function caculate(matrix: number[], matrix2: number[], n: number = matrix2.length) {\n    const result = multiply(matrix, matrix2, n);\n    const k = result[n - 1];\n    return result.map(v => v / k);\n}\n\nexport function rotate(pos: number[], rad: number) {\n    return caculate(\n        createRotateMatrix(rad, 3),\n        convertPositionMatrix(pos, 3),\n    );\n}\n\nexport function convertCSStoMatrix(a: number[]) {\n    if (a.length === 6) {\n        return [\n            a[0], a[2], a[4],\n            a[1], a[3], a[5],\n            0, 0, 1,\n        ];\n    }\n    return transpose(a);\n}\nexport function convertMatrixtoCSS(a: number[]) {\n    if (a.length === 9) {\n        return [\n            a[0], a[3],\n            a[1], a[4],\n            a[2], a[5],\n        ];\n    }\n    return transpose(a);\n}\nexport function createRotateMatrix(rad: number, n: number) {\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const m = createIdentityMatrix(n);\n\n    m[0] = cos;\n    m[1] = -sin;\n    m[n] = sin;\n    m[n + 1] = cos;\n\n    return m;\n}\n\nexport function createIdentityMatrix(n: number) {\n    const length = n * n;\n    const matrix: number[] = [];\n\n    for (let i = 0; i < length; ++i) {\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\nexport function createScaleMatrix(scale: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(scale.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\nexport function createOriginMatrix(origin: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(origin.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[n * (i + 1) - 1] = origin[i];\n    }\n    return m;\n}\n\nexport function createWarpMatrix(\n    pos0: number[],\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    nextPos0: number[],\n    nextPos1: number[],\n    nextPos2: number[],\n    nextPos3: number[],\n) {\n    const [x0, y0] = pos0;\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n    const [x3, y3] = pos3;\n\n    const [u0, v0] = nextPos0;\n    const [u1, v1] = nextPos1;\n    const [u2, v2] = nextPos2;\n    const [u3, v3] = nextPos3;\n\n    const matrix = [\n        x0, y0, 1, 0, 0, 0, -u0 * x0, -u0 * y0,\n        0, 0, 0, x0, y0, 1, -v0 * x0, -v0 * y0,\n        x1, y1, 1, 0, 0, 0, -u1 * x1, -u1 * y1,\n        0, 0, 0, x1, y1, 1, -v1 * x1, -v1 * y1,\n        x2, y2, 1, 0, 0, 0, -u2 * x2, -u2 * y2,\n        0, 0, 0, x2, y2, 1, -v2 * x2, -v2 * y2,\n        x3, y3, 1, 0, 0, 0, -u3 * x3, -u3 * y3,\n        0, 0, 0, x3, y3, 1, -v3 * x3, -v3 * y3,\n    ];\n    const inverseMatrix = invert(matrix, 8);\n\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    const h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n\n    h[8] = 1;\n    return convertDimension(h, 3, 4);\n}\n"],"names":["add","matrix","inverseMatrix","startIndex","endIndex","fromStart","k","i","swap","v","iv","divide","ignoreDimension","m","n","Math","sqrt","length","newMatrix","slice","invert","createIdentityMatrix","identityIndex","j","targetStartIndex","targetEndIndex","targetIndex","target","transpose","getRad","pos1","pos2","distX","distY","rad","atan2","PI","getOrigin","originMatrix","convertPositionMatrix","convertDimension","min","multiplies","_i","matrixes","forEach","multiply","matrix2","l","multiplyCSS","sum","nums","total","average","plus","nextPos","minus","caculate","result","map","rotate","pos","createRotateMatrix","convertCSStoMatrix","a","convertMatrixtoCSS","cos","sin","createScaleMatrix","scale","createOriginMatrix","origin","createWarpMatrix","pos0","pos3","nextPos0","nextPos1","nextPos2","nextPos3","x0","y0","x1","y1","x2","y2","x3","y3","u0","v0","u1","v1","u2","v2","u3","v3","h"],"mappings":"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"}