import { IArrayFormat, IObject } from "./types";
export declare function dot(a1: number, a2: number, b1: number, b2: number): number;
export declare function isUndefined(value: any): value is undefined;
export declare function isObject(value: any): value is IObject<any>;
export declare function isArray(value: any): value is any[];
export declare function isString(value: any): value is string;
export declare function isFunction(value: any): value is (...args: any[]) => any;
export declare function splitSpace(text: string): RegExpMatchArray;
export declare function splitComma(text: string): string[];
export declare function splitBracket(text: string): {
    prefix?: undefined;
    value?: undefined;
    suffix?: undefined;
} | {
    prefix: string;
    value: string;
    suffix: string;
};
export declare function splitUnit(text: string): {
    prefix: string;
    unit: string;
    value: number;
};
export declare function camelize(str: string): string;
export declare function decamelize(str: string, separator?: string): string;
export declare function toArray<T>(value: IArrayFormat<T>): T[];
export declare function now(): number;
export declare function findIndex<T>(arr: T[], callback: (element: T, index: number, arr: T[]) => any, defaultIndex?: number): number;
export declare function find<T>(arr: T[], callback: (element: T, index: number, arr: T[]) => any, defalutValue?: T): T | undefined;
export declare const requestAnimationFrame: (callback: FrameRequestCallback) => number;
export declare const cancelAnimationFrame: (handle: number) => void;
